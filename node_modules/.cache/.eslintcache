[{"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\index.js":"1","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\App.js":"2","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Board\\Box_player1.js":"3","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Board\\Box_player2.js":"4","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Keyboard\\Keyboard.js":"5","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Timer\\Timer.js":"6","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Keyboard\\Key.js":"7","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\logic\\game.js":"8"},{"size":222,"mtime":1654148238086,"results":"9","hashOfConfig":"10"},{"size":1072,"mtime":1654152426534,"results":"11","hashOfConfig":"10"},{"size":955,"mtime":1654148238078,"results":"12","hashOfConfig":"10"},{"size":997,"mtime":1654148238078,"results":"13","hashOfConfig":"10"},{"size":6748,"mtime":1654148617676,"results":"14","hashOfConfig":"10"},{"size":1184,"mtime":1654148238086,"results":"15","hashOfConfig":"10"},{"size":309,"mtime":1654148238078,"results":"16","hashOfConfig":"10"},{"size":2185,"mtime":1654148238086,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"hr79lh",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"21"},"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\index.js",[],[],[],"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\App.js",["46","47"],[],"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Board\\Box_player1.js",[],[],"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Board\\Box_player2.js",[],[],"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Keyboard\\Keyboard.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],[],"import React from \"react\";\r\nimport \"./Keyboard.css\";\r\nimport Key from \"./Key\";\r\nimport {Feudle} from \"../../logic/game.js\";\r\n\r\nconst Keyboard = () => {\r\n  var line = 1, box = 1;\r\n  var word = \"\";\r\n  const keyLayout = [\r\n    [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"],\r\n    [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"], //backpace included here by default\r\n    [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"], //enter included on bottom by default\r\n  ];\r\n\r\n  const [keyInput, setKeyInput] = React.useState(\"\");\r\n\r\n  var game = new Feudle();\r\n  game.set_word(\"ALERT\");\r\n\r\n  const change_green = (line, box, num) => {\r\n    const s = num + \"line\" + line.toString() + \"box\" + box.toString();\r\n    document.getElementById(s).style.backgroundColor = \"#46a842\";\r\n  }\r\n  const change_yellow = (line, box, num) => {\r\n    const s = num + \"line\" + line.toString() + \"box\" + box.toString();\r\n    document.getElementById(s).style.backgroundColor = \"rgb(239, 187, 16)\";\r\n  }\r\n  const change_grey = (line, box, num) => {\r\n    const s = num + \"line\" + line.toString() + \"box\" + box.toString();\r\n    document.getElementById(s).style.backgroundColor = \"#5f6870\";\r\n  }\r\n\r\n\r\n  document.addEventListener(\"keyup\", function(event) {\r\n    switch (event.code) {\r\n        case \"Enter\":\r\n          if(word.length == 5) {\r\n            console.log(word);\r\n            game.guess(word);\r\n            var s = game.color(word);\r\n            for (var i = 0; i < s.length; i++) {\r\n\r\n              const s2 = \"line\" + line.toString() + \"box\" + (i+1).toString();\r\n\r\n              document.getElementById(s2).style.color = \"rgb(255, 255, 255)\";\r\n              document.getElementById(s2).style.border = \"0px solid black\";\r\n              document.getElementById(s2).style.margin = \"4.5px\";\r\n              document.getElementById(s2).style.fontSize = \"25px\";\r\n              document.getElementById(s2).style.height = \"52px\";\r\n              document.getElementById(s2).style.width = \"52px\";\r\n\r\n              if(s[i] == 'g') {\r\n                change_green(line,i+1,\"\");\r\n              }\r\n              if(s[i] == 'y') {\r\n                change_yellow(line,i+1,\"\");\r\n              }\r\n              if(s[i] == 'e') {\r\n                change_grey(line,i+1,\"\");\r\n              }\r\n            }\r\n\r\n            line++;\r\n            box = 1;\r\n            word = \"\";\r\n          }\r\n          else alert(\"Word must be 5 letters\")\r\n        case \"Backspace\" :\r\n          if(box > 1) box--;\r\n          var s = \"line\" + line.toString() + \"box\" + box.toString();\r\n          document.getElementById(s).innerHTML = `<div></div><br />`;\r\n          document.getElementById(s).style.border = \"0.1px solid black\";\r\n          document.getElementById(s).style.margin = \"4px\";\r\n          if(word.length != 0) word = word.slice(0,-1);\r\n          break;\r\n        default:\r\n          if(box <= 5) {\r\n            var s = \"line\" + line.toString() + \"box\" + box.toString();  \r\n            var keyValue = event.code.toUpperCase();\r\n            document.getElementById(s).innerHTML +=`<div>${keyValue[keyValue.length-1]}</div><br />`;\r\n            document.getElementById(s).style.border = \"2px solid black\";\r\n            document.getElementById(s).style.margin = \"2.7px\";\r\n            word += keyValue[keyValue.length-1].toUpperCase();\r\n          }\r\n          if(box <= 5) box++;\r\n          break;\r\n        }\r\n    }\r\n  );\r\n\r\n  const buttonPressHandler = (keyValue) => {\r\n    //set max length of input to 5\r\n    if(box <= 5) {\r\n      var s = \"line\" + line.toString() + \"box\" + box.toString();  \r\n      document.getElementById(s).innerHTML +=`<div>${keyValue.toUpperCase()}</div><br />`;\r\n      document.getElementById(s).style.border = \"2px solid black\";\r\n      document.getElementById(s).style.margin = \"2.44px\";\r\n      word += keyValue.toUpperCase();\r\n    }\r\n    if(box <= 5) box++;\r\n    \r\n  };\r\n\r\n  const backspaceHandler = () => {\r\n    if(box > 1) box--;\r\n    var s = \"line\" + line.toString() + \"box\" + box.toString();\r\n    document.getElementById(s).innerHTML = `<div></div><br />`;\r\n    document.getElementById(s).style.border = \"0.1px solid black\";\r\n    document.getElementById(s).style.margin = \"4px\";\r\n    if(word.length != 0) word = word.slice(0,-1);\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    //submit only when input is 5 characters\r\n    if(word.length == 5) {\r\n      console.log(word);\r\n      game.guess(word);\r\n\r\n      var s = game.color(word);\r\n\r\n      for (var i = 0; i < s.length; i++) {\r\n\r\n        const s2 = \"line\" + line.toString() + \"box\" + (i+1).toString();\r\n\r\n        document.getElementById(s2).style.color = \"rgb(255, 255, 255)\";\r\n        document.getElementById(s2).style.border = \"0px solid black\";\r\n        document.getElementById(s2).style.margin = \"4.5px\";\r\n        document.getElementById(s2).style.fontSize = \"25px\";\r\n        document.getElementById(s2).style.height = \"52px\";\r\n        document.getElementById(s2).style.width = \"52px\";\r\n\r\n        if(s[i] == 'g') {\r\n          change_green(line,i+1,\"\");\r\n        }\r\n        if(s[i] == 'y') {\r\n          change_yellow(line,i+1,\"\");\r\n        }\r\n        if(s[i] == 'e') {\r\n          change_grey(line,i+1,\"\");\r\n        }\r\n      }\r\n\r\n      line++;\r\n      box = 1;\r\n      word = \"\";\r\n    }\r\n    else alert(\"Word must be 5 letters\")\r\n  };\r\n\r\n  const backspaceKey = (\r\n    <button type=\"button\" className=\"keyboard__key\" onClick={backspaceHandler}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"22\"\r\n        height=\"22\"\r\n        fill=\"currentColor\"\r\n        class=\"bi bi-backspace-fill\"\r\n        viewBox=\"0 0 16 16\"\r\n      >\r\n        <path d=\"M15.683 3a2 2 0 0 0-2-2h-7.08a2 2 0 0 0-1.519.698L.241 7.35a1 1 0 0 0 0 1.302l4.843 5.65A2 2 0 0 0 6.603 15h7.08a2 2 0 0 0 2-2V3zM5.829 5.854a.5.5 0 1 1 .707-.708l2.147 2.147 2.146-2.147a.5.5 0 1 1 .707.708L9.39 8l2.146 2.146a.5.5 0 0 1-.707.708L8.683 8.707l-2.147 2.147a.5.5 0 0 1-.707-.708L7.976 8 5.829 5.854z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n\r\n  const enterKey = (\r\n    <button onClick={submitHandler} type=\"button\" className=\"keyboard__key\">\r\n      Enter\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"keyboard\">\r\n      {/* <h5>{keyInput}</h5> Remove this later */}\r\n      <div className=\"keyboard__keys\">\r\n        <div>\r\n          {keyLayout[0].map((key) => (\r\n            <Key text={key} onPress={buttonPressHandler} />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          {keyLayout[1].map((key) => (\r\n            <Key text={key} onPress={buttonPressHandler} />\r\n          ))}\r\n          {backspaceKey}\r\n        </div>\r\n        <div>\r\n          {keyLayout[2].map((key) => (\r\n            <Key text={key} onPress={buttonPressHandler} />\r\n          ))}\r\n          {enterKey}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Keyboard;\r\n","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Timer\\Timer.js",["63"],[],"import { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport './Timer.css'\r\n\r\nconst Timer = () => {\r\n  const [time, setTime] = useState(0);\r\n  const [timerOn, setTimerOn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (timerOn) {\r\n      interval = setInterval(() => {\r\n        setTime((time) => time + 10);\r\n      }, 10);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [timerOn]);\r\n\r\n  const minutes = (\"0\" + Math.floor((time / 60000) % 60)).slice(-2);\r\n  const seconds = (\"0\" + Math.floor((time / 1000) % 60)).slice(-2);\r\n\r\n  const percentage = Math.round(((Math.floor((time / 1000) % 300)) / 300.0) * 100);\r\n\r\n  return (\r\n    <div class=\"timer-position\">\r\n      <CircularProgressbar value={percentage} text={minutes + \":\" + seconds} />\r\n      <button onClick={() => setTimerOn(true)}>Start</button>\r\n      <button onClick={() => setTimerOn(false)}>Stop</button>\r\n      <button onClick={() => setTime(0)}>Reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;","C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\components\\Keyboard\\Key.js",[],[],"C:\\UIUC\\Dev\\feudle2.0\\feudle-2.0\\src\\logic\\game.js",["64","65","66","67","68","69"],[],"export class Feudle {\r\n    constructor() {\r\n        this._word = \"\";\r\n        this._guess = \"\";\r\n        this._total_gusses = 6;\r\n        this._guesses = 0;\r\n        let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n        this._letter_map = new Map();\r\n        for (let i = 0; i < alphabet.length; i++) {\r\n            this._letter_map.set(alphabet[i], {\r\n                guessed: false,\r\n                in_word: false,\r\n                in_position: false\r\n            });\r\n        }\r\n    }\r\n    set_word(word) {\r\n        this._word = word.toUpperCase();\r\n    }\r\n    check_win() {\r\n        return this._guess == this._word;\r\n    }\r\n    check_lose() {\r\n        return this._guesses >= this._total_gusses;\r\n    }\r\n    guess(guess) {\r\n        this._guess = guess.toUpperCase();\r\n        for (let i = 0; i < this._guess.length; i++) {\r\n            let char = this._guess.charAt(i);\r\n            if (this._letter_map.has(char)) {\r\n                this._letter_map.get(char).guessed = true;\r\n                if (this._word.includes(char)) {\r\n                    this._letter_map.get(char).in_word = true;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this._guess.length; i++) {\r\n            let char = this._guess.charAt(i);\r\n            if (char == this._word.charAt(i)) {\r\n                this._letter_map.get(char).in_position = true;\r\n            }\r\n        }\r\n        this._guesses++;\r\n        return this.check_win();\r\n    }\r\n    color(guess) {\r\n        var color = \"\";\r\n        for (let i = 0; i < this._guess.length; i++) {\r\n            let char = this._guess.charAt(i);\r\n            var flag = 0;\r\n            if (char == this._word.charAt(i)) {\r\n                color += \"g\";\r\n                flag = 1;\r\n            }\r\n            else {\r\n                for (let j = 0; j < this._guess.length; j++) {\r\n                    if (i != j && char == this._word.charAt(j)) {\r\n                        color += \"y\";\r\n                        flag = 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (flag == 0) {\r\n                color += \"e\";\r\n            }\r\n        }\r\n        return color;\r\n    }\r\n}\r\n\r\n",{"ruleId":"70","severity":1,"message":"71","line":28,"column":13,"nodeType":"72","messageId":"73","endLine":28,"endColumn":28},{"ruleId":"70","severity":1,"message":"74","line":31,"column":13,"nodeType":"72","messageId":"73","endLine":31,"endColumn":28},{"ruleId":"75","severity":1,"message":"76","line":15,"column":10,"nodeType":"77","messageId":"78","endLine":15,"endColumn":18},{"ruleId":"75","severity":1,"message":"79","line":15,"column":20,"nodeType":"77","messageId":"78","endLine":15,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":37,"column":26,"nodeType":"82","messageId":"83","endLine":37,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":52,"column":23,"nodeType":"82","messageId":"83","endLine":52,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":55,"column":23,"nodeType":"82","messageId":"83","endLine":55,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":58,"column":23,"nodeType":"82","messageId":"83","endLine":58,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":68,"column":9,"nodeType":"86","messageId":"87","endLine":75,"endColumn":17},{"ruleId":"88","severity":1,"message":"89","line":70,"column":15,"nodeType":"77","messageId":"90","endLine":70,"endColumn":16},{"ruleId":"80","severity":1,"message":"91","line":74,"column":26,"nodeType":"82","messageId":"83","endLine":74,"endColumn":28},{"ruleId":"88","severity":1,"message":"89","line":78,"column":17,"nodeType":"77","messageId":"90","endLine":78,"endColumn":18},{"ruleId":"80","severity":1,"message":"91","line":110,"column":20,"nodeType":"82","messageId":"83","endLine":110,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":115,"column":20,"nodeType":"82","messageId":"83","endLine":115,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":132,"column":17,"nodeType":"82","messageId":"83","endLine":132,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":135,"column":17,"nodeType":"82","messageId":"83","endLine":135,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":138,"column":17,"nodeType":"82","messageId":"83","endLine":138,"endColumn":19},{"ruleId":"75","severity":1,"message":"92","line":1,"column":31,"nodeType":"77","messageId":"78","endLine":1,"endColumn":42},{"ruleId":"80","severity":1,"message":"81","line":21,"column":28,"nodeType":"82","messageId":"83","endLine":21,"endColumn":30},{"ruleId":"80","severity":1,"message":"81","line":39,"column":22,"nodeType":"82","messageId":"83","endLine":39,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":51,"column":22,"nodeType":"82","messageId":"83","endLine":51,"endColumn":24},{"ruleId":"80","severity":1,"message":"91","line":57,"column":27,"nodeType":"82","messageId":"83","endLine":57,"endColumn":29},{"ruleId":"80","severity":1,"message":"81","line":57,"column":40,"nodeType":"82","messageId":"83","endLine":57,"endColumn":42},{"ruleId":"80","severity":1,"message":"81","line":64,"column":22,"nodeType":"82","messageId":"83","endLine":64,"endColumn":24},"react/jsx-pascal-case","Imported JSX component Box_player1 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Box_player2 must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'keyInput' is assigned a value but never used.","Identifier","unusedVar","'setKeyInput' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-redeclare","'s' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'buildStyles' is defined but never used."]