{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Debug = void 0;\n\nvar containers_1 = require(\"./containers\");\n\nvar settings_1 = require(\"./settings\");\n/**\n * Represents a utility module to view debug information inside the DOM.\n * This is disabled by default and needs to manually be enabled by setting\n * the '.enabled' field to true.\n *\n * While disabled, the utility will not fetch stats and update itself.\n */\n\n\nvar Debug =\n/** @class */\nfunction () {\n  /**\n   * Registers a new debug utility that is attached to the given scene.\n   *\n   * @param scene The scene to attach to.\n   */\n  function Debug(scene) {\n    this.scene = scene;\n    /**\n     * The rate at which the debug interface should refresh itself (per second).\n     */\n\n    this.refreshRate = 8;\n    /**\n     * The timer counting down to refreshes.\n     */\n\n    this.refreshTimer = 1 / this.refreshRate;\n  }\n  /**\n   * Processes a tick event in the interface. This checks if enough has passed to\n   * trigger a refresh, and if so, fetches the debug information and updates the DOM.\n   *\n   * @param delta The time that has elapsed since the last tick.\n   */\n\n\n  Debug.prototype.tick = function (delta) {\n    var container = containers_1.debugContainer.current; // If the current display style does not match the style inferred from the\n    // enabled-state, update it.\n\n    var displayStyle = settings_1.settings.debug ? \"block\" : \"none\";\n\n    if (container.style.display !== displayStyle) {\n      container.style.display = displayStyle;\n    }\n\n    if (!settings_1.settings.debug) {\n      // If the interface is not enabled, don't fetch or update any infos.\n      return;\n    }\n\n    this.refreshTimer += delta;\n\n    if (this.refreshTimer > 1 / this.refreshRate) {\n      this.refreshTimer = 0; // Update the container with the fetched information joined on line breaks.\n\n      container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\n    }\n  };\n  /**\n   * Fetches the debug information from the specified delta and the linked scene.\n   *\n   * @returns An array of debugging information, formatted as HTML.\n   */\n\n\n  Debug.prototype.getDebugInformation = function (delta) {\n    // Count emitters and particles.\n    var emitters = this.scene.emitters.length;\n    var particles = this.scene.emitters.reduce(function (acc, cur) {\n      return acc + cur.particles.length;\n    }, 0);\n    var infos = [\"<b>party.js Debug</b>\", \"--------------\", \"FPS: \" + Math.round(1 / delta), \"Emitters: \" + emitters, \"Particles: \" + particles]; // Emitter informations are formatted using their index, internal timer\n    // and total particle count.\n\n    var emitterInfos = this.scene.emitters.map(function (emitter) {\n      return [// Show the current loop and the total loops.\n      \"\\u2B6F: \" + (emitter[\"currentLoop\"] + 1) + \"/\" + (emitter.options.loops >= 0 ? emitter.options.loops : \"âˆž\"), // Show the amount of particle contained.\n      \"\\u03A3p: \" + emitter.particles.length, // Show the internal timer.\n      !emitter.isExpired ? \"\\u03A3t: \" + emitter[\"durationTimer\"].toFixed(3) + \"s\" : \"<i>expired</i>\"].join(\", \");\n    });\n    infos.push.apply(infos, __spreadArray([\"--------------\"], emitterInfos));\n    return infos;\n  };\n\n  return Debug;\n}();\n\nexports.Debug = Debug;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAEA;AAEA;;;;;;;;;AAOA;AAAA;AAAA;EAUI;;;;;EAKA,eAAoBA,KAApB,EAAgC;IAAZ;IAdpB;;;;IAGiB,mBAAc,CAAd;IACjB;;;;IAGQ,oBAAe,IAAI,KAAKC,WAAxB;EAO4B;EAEpC;;;;;;;;EAMOC,uBAAP,UAAYC,KAAZ,EAAyB;IACrB,IAAMC,SAAS,GAAGC,4BAAeC,OAAjC,CADqB,CAGrB;IACA;;IACA,IAAMC,YAAY,GAAGC,oBAASC,KAAT,GAAiB,OAAjB,GAA2B,MAAhD;;IACA,IAAIL,SAAS,CAACM,KAAV,CAAgBC,OAAhB,KAA4BJ,YAAhC,EAA8C;MAC1CH,SAAS,CAACM,KAAV,CAAgBC,OAAhB,GAA0BJ,YAA1B;IACH;;IAED,IAAI,CAACC,oBAASC,KAAd,EAAqB;MACjB;MACA;IACH;;IAED,KAAKG,YAAL,IAAqBT,KAArB;;IACA,IAAI,KAAKS,YAAL,GAAoB,IAAI,KAAKX,WAAjC,EAA8C;MAC1C,KAAKW,YAAL,GAAoB,CAApB,CAD0C,CAE1C;;MACAR,SAAS,CAACS,SAAV,GAAsB,KAAKC,mBAAL,CAAyBX,KAAzB,EAAgCY,IAAhC,CAAqC,MAArC,CAAtB;IACH;EACJ,CArBM;EAuBP;;;;;;;EAKQb,sCAAR,UAA4BC,KAA5B,EAAyC;IACrC;IACA,IAAMa,QAAQ,GAAG,KAAKhB,KAAL,CAAWgB,QAAX,CAAoBC,MAArC;IACA,IAAMC,SAAS,GAAG,KAAKlB,KAAL,CAAWgB,QAAX,CAAoBG,MAApB,CACd,UAACC,GAAD,EAAMC,GAAN,EAAS;MAAK,UAAG,GAAGA,GAAG,CAACH,SAAJ,CAAcD,MAApB;IAA0B,CAD1B,EAEd,CAFc,CAAlB;IAKA,IAAMK,KAAK,GAAa,CACpB,uBADoB,EAEpB,gBAFoB,EAGpB,UAAQC,IAAI,CAACC,KAAL,CAAW,IAAIrB,KAAf,CAHY,EAIpB,eAAaa,QAJO,EAKpB,gBAAcE,SALM,CAAxB,CARqC,CAgBrC;IACA;;IACA,IAAMO,YAAY,GAAa,KAAKzB,KAAL,CAAWgB,QAAX,CAAoBU,GAApB,CAAwB,UACnDC,OADmD,EAC5C;MAEP,OAAO,CACH;MACA,cAAMA,OAAO,CAAC,aAAD,CAAP,GAAyB,CAA/B,IAAgC,GAAhC,IACIA,OAAO,CAACC,OAAR,CAAgBC,KAAhB,IAAyB,CAAzB,GAA6BF,OAAO,CAACC,OAAR,CAAgBC,KAA7C,GAAqD,GADzD,CAFG,EAKH;MACA,cAAOF,OAAO,CAACT,SAAR,CAAkBD,MANtB,EAOH;MACA,CAACU,OAAO,CAACG,SAAT,GACM,cAAOH,OAAO,CAAC,eAAD,CAAP,CAAyBI,OAAzB,CAAiC,CAAjC,CAAP,GAA0C,GADhD,GAEM,gBAVH,EAWLhB,IAXK,CAWA,IAXA,CAAP;IAYH,CAf8B,CAA/B;IAiBAO,KAAK,CAACU,IAAN,CAAUC,KAAV,QAAKC,eAAM,gBAAN,GAA2BT,YAA3B,CAAL;IAEA,OAAOH,KAAP;EACH,CAtCO;;EAuCZ;AAAC,CA1FD;;AAAaa","names":["scene","refreshRate","Debug","delta","container","containers_1","current","displayStyle","settings_1","debug","style","display","refreshTimer","innerHTML","getDebugInformation","join","emitters","length","particles","reduce","acc","cur","infos","Math","round","emitterInfos","map","emitter","options","loops","isExpired","toFixed","push","apply","__spreadArray","exports"],"sources":["../src/debug.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}