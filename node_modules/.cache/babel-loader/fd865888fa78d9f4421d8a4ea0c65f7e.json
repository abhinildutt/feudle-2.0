{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lazy = void 0;\n/**\r\n * A wrapper class to lazily initialize a value.\r\n * Supports custom factory and predicate methods.\r\n */\n\nvar Lazy =\n/** @class */\nfunction () {\n  function Lazy(factory, exists) {\n    if (exists === void 0) {\n      exists = Lazy.defaultExists;\n    }\n\n    this.factory = factory;\n    this.exists = exists;\n  }\n\n  Object.defineProperty(Lazy.prototype, \"current\", {\n    /**\r\n     * The current value of the lazy object. Will be initialized, if the 'exists'\r\n     * predicate doesn't match.\r\n     */\n    get: function () {\n      if (!this.exists(this.value)) {\n        this.value = this.factory();\n      }\n\n      return this.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Lazy.defaultExists = function (value) {\n    return typeof value !== \"undefined\";\n  };\n\n  return Lazy;\n}();\n\nexports.Lazy = Lazy;","map":{"version":3,"mappings":";;;;;;AASA;;;;;AAIA;AAAA;AAAA;EAcI,cACYA,OADZ,EAEYC,MAFZ,EAE2D;IAA/C;MAAAA,SAA6BC,IAAI,CAACC,aAAlC;IAA+C;;IAD/C;IACA;EACR;;EAZJC,sBAAWF,cAAX,EAAW,SAAX,EAAkB;IAJlB;;;;SAIA;MACI,IAAI,CAAC,KAAKD,MAAL,CAAY,KAAKI,KAAjB,CAAL,EAA8B;QAC1B,KAAKA,KAAL,GAAa,KAAKL,OAAL,EAAb;MACH;;MACD,OAAO,KAAKK,KAAZ;IACH,CALiB;qBAAA;;EAAA,CAAlB;;EAceH,qBAAf,UAAgCG,KAAhC,EAAwC;IACpC,OAAO,OAAOA,KAAP,KAAiB,WAAxB;EACH,CAFc;;EAGnB;AAAC,CAtBD;;AAAaC","names":["factory","exists","Lazy","defaultExists","Object","value","exports"],"sources":["../../src/util/lazy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}