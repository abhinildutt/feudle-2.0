{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotationToNormal = void 0;\n\nvar components_1 = require(\"../components\");\n\nvar math_1 = require(\"../systems/math\");\n/**\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\n *\n * @remarks\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\n * origin, and rotating it by the specified angles. Note that the z-component of the\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\n * describing the orientation of the plane are calculated. Their cross product\n * denotes the normal vector.\n *\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\n */\n\n\nfunction rotationToNormal(rotation) {\n  var alpha = rotation.x * math_1.deg2rad;\n  var beta = rotation.y * math_1.deg2rad;\n  var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\n  var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\n  return a.cross(b);\n}\n\nexports.rotationToNormal = rotationToNormal;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;;;;;;;;;;AAYA,SAAgBA,gBAAhB,CAAiCC,QAAjC,EAAiD;EAC7C,IAAMC,KAAK,GAAGD,QAAQ,CAACE,CAAT,GAAaC,cAA3B;EACA,IAAMC,IAAI,GAAGJ,QAAQ,CAACK,CAAT,GAAaF,cAA1B;EAEA,IAAMG,CAAC,GAAG,IAAIC,mBAAJ,CAAWC,IAAI,CAACC,GAAL,CAASL,IAAT,CAAX,EAA2B,CAA3B,EAA8BI,IAAI,CAACE,GAAL,CAASN,IAAT,CAA9B,CAAV;EACA,IAAMO,CAAC,GAAG,IAAIJ,mBAAJ,CAAW,CAAX,EAAcC,IAAI,CAACC,GAAL,CAASR,KAAT,CAAd,EAA+BO,IAAI,CAACE,GAAL,CAAST,KAAT,CAA/B,CAAV;EAEA,OAAOK,CAAC,CAACM,KAAF,CAAQD,CAAR,CAAP;AACH;;AARDE","names":["rotationToNormal","rotation","alpha","x","math_1","beta","y","a","components_1","Math","cos","sin","b","cross","exports"],"sources":["../../src/util/rotation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}