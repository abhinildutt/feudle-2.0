{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scene = void 0;\n\nvar debug_1 = require(\"./debug\");\n\nvar emitter_1 = require(\"./particles/emitter\");\n\nvar renderer_1 = require(\"./particles/renderer\");\n/**\n * Represents a scene that contains emitters and their particles.\n *\n * Scenes are responsible for spawning and updating emitters, and\n * removing them once they are done.\n *\n * Scenes are not explicitely present in the DOM as an element, only\n * the contained particles are.\n */\n\n\nvar Scene =\n/** @class */\nfunction () {\n  /**\n   * Initializes a new scene and starts the ticking job.\n   */\n  function Scene() {\n    /**\n     * The emitters currently present in the scene.\n     */\n    this.emitters = [];\n    /**\n     * The debug instance associated with the scene.\n     */\n\n    this.debug = new debug_1.Debug(this);\n    /**\n     * The renderer associated with the scene.\n     */\n\n    this.renderer = new renderer_1.Renderer();\n    /**\n     * The ID of the currently scheduled tick.\n     */\n\n    this.scheduledTickId = undefined;\n    /**\n     * The timestamp of the last tick, used to calculate deltas.\n     *\n     * @initialValue `performance.now()` (time origin)\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\n     */\n\n    this.lastTickTimestamp = performance.now(); // Ensure the scene context is preserved on the tick.\n\n    this.tick = this.tick.bind(this);\n    this.scheduleTick();\n  }\n  /**\n   * Creates and returns a new, default emitter object.\n   */\n\n\n  Scene.prototype.createEmitter = function (options) {\n    var emitter = new emitter_1.Emitter(options);\n    this.emitters.push(emitter);\n    return emitter;\n  };\n  /**\n   * Clears all emitters from the scene.\n   *\n   * @returns The number of cleared emitters.\n   */\n\n\n  Scene.prototype.clearEmitters = function () {\n    return this.emitters.splice(0).length;\n  };\n  /**\n   * Clears the particles from all emitters in the scene.\n   * Note that this does not remove the actual emitter objects though.\n   *\n   * @returns The number of cleared particles.\n   */\n\n\n  Scene.prototype.clearParticles = function () {\n    return this.emitters.reduce(function (sum, emitter) {\n      return sum + emitter.clearParticles();\n    }, 0);\n  };\n  /**\n   * Schedules a tick in the scene.\n   */\n\n\n  Scene.prototype.scheduleTick = function () {\n    this.scheduledTickId = window.requestAnimationFrame(this.tick);\n  };\n  /**\n   * Cancels a pending tick operation.\n   */\n\n\n  Scene.prototype.cancelTick = function () {\n    window.cancelAnimationFrame(this.scheduledTickId);\n  };\n  /**\n   * Processes a tick cycle, updating all emitters contained in the scene.\n   * This is handled as a JS animation frame event, hence the passed timestamp.\n   *\n   * @remarks\n   * The emitter ticking and particle rendering is run using try-catch blocks,\n   * to ensure that we can recover from potential errors.\n   *\n   * @param timestamp The current timestamp of the animation frame.\n   */\n\n\n  Scene.prototype.tick = function (timestamp) {\n    // Calculate the elapsed delta and convert it to seconds.\n    var delta = (timestamp - this.lastTickTimestamp) / 1000;\n\n    try {\n      // Perform ticks for all the emitters in the scene.\n      for (var i = 0; i < this.emitters.length; i++) {\n        var emitter = this.emitters[i];\n        emitter.tick(delta);\n\n        if (emitter.isExpired && emitter.canRemove) {\n          this.emitters.splice(i--, 1);\n        }\n      }\n    } catch (error) {\n      console.error(\"An error occurred while updating the scene's emitters:\\n\\\"\" + error + \"\\\"\");\n    }\n\n    try {\n      // Instruct the renderer to draw the particles of all systems.\n      this.renderer.begin();\n\n      for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n        var emitter = _a[_i];\n\n        for (var _b = 0, _c = emitter.particles; _b < _c.length; _b++) {\n          var particle = _c[_b];\n          this.renderer.renderParticle(particle, emitter);\n        }\n      }\n\n      this.renderer.end();\n    } catch (error) {\n      console.error(\"An error occurred while rendering the scene's particles:\\n\\\"\" + error + \"\\\"\");\n    } // Perform a tick on the debug interface\n\n\n    this.debug.tick(delta); // Save the timestamp as the last tick timestamp and schedule a new tick.\n\n    this.lastTickTimestamp = timestamp;\n    this.scheduleTick();\n  };\n\n  return Scene;\n}();\n\nexports.Scene = Scene;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;EA2BI;;;EAGA;IA7BA;;;IAGO,gBAAsB,EAAtB;IAEP;;;;IAGgB,aAAQ,IAAIA,aAAJ,CAAU,IAAV,CAAR;IAChB;;;;IAGgB,gBAAW,IAAIC,mBAAJ,EAAX;IAEhB;;;;IAGQ,uBAA2BC,SAA3B;IACR;;;;;;;IAMQ,yBAAoBC,WAAW,CAACC,GAAZ,EAApB,CAKR,CACI;;IACA,KAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;IACA,KAAKC,YAAL;EACH;EAED;;;;;EAGOC,gCAAP,UAAqBC,OAArB,EAAyD;IACrD,IAAMC,OAAO,GAAG,IAAIC,iBAAJ,CAAYF,OAAZ,CAAhB;IACA,KAAKG,QAAL,CAAcC,IAAd,CAAmBH,OAAnB;IACA,OAAOA,OAAP;EACH,CAJM;EAKP;;;;;;;EAKOF,gCAAP;IACI,OAAO,KAAKI,QAAL,CAAcE,MAAd,CAAqB,CAArB,EAAwBC,MAA/B;EACH,CAFM;EAGP;;;;;;;;EAMOP,iCAAP;IACI,OAAO,KAAKI,QAAL,CAAcI,MAAd,CACH,UAACC,GAAD,EAAMP,OAAN,EAAa;MAAK,UAAG,GAAGA,OAAO,CAACQ,cAAR,EAAN;IAA8B,CAD7C,EAEH,CAFG,CAAP;EAIH,CALM;EAOP;;;;;EAGOV,+BAAP;IACI,KAAKW,eAAL,GAAuBC,MAAM,CAACC,qBAAP,CAA6B,KAAKhB,IAAlC,CAAvB;EACH,CAFM;EAGP;;;;;EAGOG,6BAAP;IACIY,MAAM,CAACE,oBAAP,CAA4B,KAAKH,eAAjC;EACH,CAFM;EAIP;;;;;;;;;;;;EAUQX,uBAAR,UAAae,SAAb,EAA8B;IAC1B;IACA,IAAMC,KAAK,GAAG,CAACD,SAAS,GAAG,KAAKE,iBAAlB,IAAuC,IAArD;;IAEA,IAAI;MACA;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,QAAL,CAAcG,MAAlC,EAA0CW,CAAC,EAA3C,EAA+C;QAC3C,IAAMhB,OAAO,GAAG,KAAKE,QAAL,CAAcc,CAAd,CAAhB;QAEAhB,OAAO,CAACL,IAAR,CAAamB,KAAb;;QACA,IAAId,OAAO,CAACiB,SAAR,IAAqBjB,OAAO,CAACkB,SAAjC,EAA4C;UACxC,KAAKhB,QAAL,CAAcE,MAAd,CAAqBY,CAAC,EAAtB,EAA0B,CAA1B;QACH;MACJ;IACJ,CAVD,CAUE,OAAOG,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CACI,+DAA4DA,KAA5D,GAAiE,IADrE;IAGH;;IAED,IAAI;MACA;MACA,KAAKE,QAAL,CAAcC,KAAd;;MACA,KAAsB,sBAAKpB,QAA3B,EAAsBqB,cAAtB,EAAsBA,IAAtB,EAAqC;QAAhC,IAAMvB,OAAO,SAAb;;QACD,KAAuB,wBAAO,CAACwB,SAA/B,EAAuBC,cAAvB,EAAuBA,IAAvB,EAA0C;UAArC,IAAMC,QAAQ,SAAd;UACD,KAAKL,QAAL,CAAcM,cAAd,CAA6BD,QAA7B,EAAuC1B,OAAvC;QACH;MACJ;;MACD,KAAKqB,QAAL,CAAcO,GAAd;IACH,CATD,CASE,OAAOT,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CACI,iEAA8DA,KAA9D,GAAmE,IADvE;IAGH,CAjCyB,CAmC1B;;;IACA,KAAKU,KAAL,CAAWlC,IAAX,CAAgBmB,KAAhB,EApC0B,CAsC1B;;IACA,KAAKC,iBAAL,GAAyBF,SAAzB;IACA,KAAKhB,YAAL;EACH,CAzCO;;EA0CZ;AAAC,CAlID;;AAAaiC","names":["debug_1","renderer_1","undefined","performance","now","tick","bind","scheduleTick","Scene","options","emitter","emitter_1","emitters","push","splice","length","reduce","sum","clearParticles","scheduledTickId","window","requestAnimationFrame","cancelAnimationFrame","timestamp","delta","lastTickTimestamp","i","isExpired","canRemove","error","console","renderer","begin","_i","particles","_b","particle","renderParticle","end","debug","exports"],"sources":["../src/scene.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}