{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Renderer = void 0;\n\nvar __1 = require(\"..\");\n\nvar vector_1 = require(\"../components/vector\");\n\nvar containers_1 = require(\"../containers\");\n\nvar shapes_1 = require(\"../systems/shapes\");\n\nvar util_1 = require(\"../util\");\n/**\n * Represents a renderer used to draw particles to the DOM via HTML\n * elements. Additionally, it is responsible for purging the elements\n * of destroyed particles from the DOM.\n */\n\n\nvar Renderer =\n/** @class */\nfunction () {\n  function Renderer() {\n    /**\n     * The lookup of elements currently handled by the renderer, with the\n     * particle ID as key and a HTMLElement as the value.\n     */\n    this.elements = new Map();\n    /**\n     * The normalized direction the light comes from.\n     */\n\n    this.light = new vector_1.Vector(0, 0, 1);\n    /**\n     * Whether or not the renderer should actually draw particles.\n     */\n\n    this.enabled = true; // Respect that users might prefer reduced motion.\n    // See: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n\n    this.enabled = !__1.settings.respectReducedMotion || !window.matchMedia(\"(prefers-reduced-motion)\").matches;\n  }\n  /**\n   * Begins a new render block. During the rendering phase, a list of rendered particles\n   * is tracked, so that stale particles can be removed later.\n   */\n\n\n  Renderer.prototype.begin = function () {\n    this.renderedParticles = [];\n  };\n  /**\n   * Terminates an existing render block. This checks which particles were rendered\n   * during the block and purges all unused HTMLElements from the DOM.\n   *\n   * @returns The amount of particles that were rendered.\n   */\n\n\n  Renderer.prototype.end = function () {\n    var it = this.elements.keys();\n    var result = it.next();\n\n    while (!result.done) {\n      var id = result.value;\n\n      if (!this.renderedParticles.includes(id)) {\n        this.elements.get(id).remove();\n        this.elements.delete(id);\n      }\n\n      result = it.next();\n    }\n\n    return this.renderedParticles.length;\n  };\n  /**\n   * Renders an individual particle to the DOM. If the particle is rendered for the first\n   * time, a HTMLElement will be created using the emitter's render settings.\n   *\n   * @param particle The particle to be rendered.\n   * @param emitter The system containing the particle.\n   */\n\n\n  Renderer.prototype.renderParticle = function (particle, emitter) {\n    if (!this.enabled) return;\n    var options = emitter.renderer; // Ensure that an element for the particle exists.\n\n    var element = this.elements.has(particle.id) ? this.elements.get(particle.id) : this.createParticleElement(particle, options);\n\n    if (options.applyColor) {\n      // If the options offer a coloring method, apply it.\n      options.applyColor(particle.color, element);\n    }\n\n    if (options.applyOpacity) {\n      // If the options offer an opacity modifying method, apply it.\n      options.applyOpacity(particle.opacity, element);\n    }\n\n    if (options.applyLighting) {\n      // If the options offer a lighting method, apply it.\n      // Lighting is calculated as a combination of the particle's normal\n      // direction and the lighting direction.\n      var normal = util_1.rotationToNormal(particle.rotation);\n      var lightingCoefficient = normal.dot(this.light);\n      options.applyLighting(lightingCoefficient, element);\n    }\n\n    if (options.applyTransform) {\n      // If the options offer a transformation method, apply it.\n      // This ensures the particle is rendered at the correct position with the correct rotation.\n      options.applyTransform(particle, element);\n    } // Mark the particle as rendered.\n\n\n    this.renderedParticles.push(particle.id);\n  };\n  /**\n   * Creates the HTMLElement for a particle that does not have one already.\n   */\n\n\n  Renderer.prototype.createParticleElement = function (particle, options) {\n    // Resolve the element returned from the factory.\n    var resolved = shapes_1.resolveShapeFactory(options.shapeFactory); // Clone the node to ensure we do not break existing elements.\n\n    var element = resolved.cloneNode(true); // Ensure that the elements can be \"stacked\" ontop of eachother.\n\n    element.style.position = \"absolute\"; // Register the new element in the map, while appending the new element to the DOM.\n\n    this.elements.set(particle.id, containers_1.particleContainer.current.appendChild(element));\n    return element;\n  };\n\n  return Renderer;\n}();\n\nexports.Renderer = Renderer;","map":{"version":3,"mappings":"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","names":["Map","vector_1","enabled","__1","respectReducedMotion","window","matchMedia","matches","Renderer","renderedParticles","it","elements","keys","result","next","done","id","value","includes","get","remove","delete","length","particle","emitter","options","renderer","element","has","createParticleElement","applyColor","color","applyOpacity","opacity","applyLighting","normal","util_1","rotation","lightingCoefficient","dot","light","applyTransform","push","resolved","shapes_1","shapeFactory","cloneNode","style","position","set","containers_1","current","appendChild","exports"],"sources":["../../src/particles/renderer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}